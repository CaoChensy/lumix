{"config":{"lang":["en"],"separator":"[\\s\\u200b\\-]","pipeline":["stemmer"]},"docs":[{"location":"","title":"Quick Start","text":"<p>\u200b\u5b89\u88c5\u200b</p> <pre><code>pip install lumix\n</code></pre> <p>\u200b\u57fa\u672c\u200b\u4f7f\u7528\u200b</p> \u200b\u5927\u200b\u6a21\u578b\u200bAPI\u200b\u8c03\u7528\u200b \u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200bOutput <pre><code>from lumix.llm import OpenAI\n\nbase_url = \"https://open.bigmodel.cn/api/paas/v4\"\nllm = OpenAI(model=\"glm-4-flash\", base_url=base_url, api_key=\"your_api_key\")\n\ncompletion = self.llm.completion(prompt=\"\u200b\u4f60\u597d\u200b\")\nprint(completion.choices[0].message.content)\n</code></pre> <pre><code>[User] \u200b\u4f60\u597d\u200b\n[Assistant] \u200b\u4f60\u597d\u200b\ud83d\udc4b\uff01\u200b\u5f88\u200b\u9ad8\u5174\u200b\u89c1\u5230\u200b\u4f60\u200b\uff0c\u200b\u6709\u200b\u4ec0\u4e48\u200b\u53ef\u4ee5\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u7684\u200b\u5417\u200b\uff1f\n</code></pre>"},{"location":"agent/","title":"Agent","text":"Agent Search \u200b\u4ee3\u7801\u200b\u793a\u4f8b\u200bOutput <pre><code>from lumix.llm import OpenAI\nfrom lumix.agent import ToolsAgent, Tools\nfrom lumix.agent.tools import baidu_search\nfrom lumix.types.messages import SystemMessage, UserMessage\n\nbase_url = \"https://api-inference.modelscope.cn/v1/\"\nmodel = \"Qwen/Qwen2.5-14B-Instruct-1M\"\nllm = OpenAI(model=model, base_url=base_url, key_name=\"MODELSCOPE_TOKEN\", verbose=False)\ntools = Tools(tools=[baidu_search])\nagent = ToolsAgent(tools=tools, llm=llm, verbose=True)\n\nmessages = [\n    SystemMessage(content=\"You are a helpful assistant. Use search tool before answer user's question. Answer in Markdown format and give the corresponding url quote.\"),\n    UserMessage(content=\"\u200b\u76ee\u524d\u200b\u56fd\u9645\u200b\u4e52\u4e53\u200b\u79ef\u5206\u200b\u6392\u540d\u200b\u524d\u4e94\u200b\u7684\u200b\u662f\u200b\u54ea\u4e9b\u200b\u4eba\u200b\uff0c\u200b\u79ef\u5206\u200b\u662f\u200b\u591a\u5c11\u200b\uff1f\")\n]\ncompletion = agent.completion(messages=messages)\nprint(completion.choices[0].message.content)\n</code></pre> <pre><code>\u200b\u6839\u636e\u200b\u6700\u65b0\u200b\u7684\u200b\u56fd\u9645\u200b\u4e52\u4e53\u7403\u200b\u8054\u5408\u4f1a\u200b\uff08WTT\uff09\u200b\u6392\u540d\u200b\uff0c\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u7537\u5973\u200b\u5355\u6253\u200b\u6392\u540d\u200b\u524d\u4e94\u200b\u7684\u200b\u60c5\u51b5\u200b\uff1a\n\n### \u200b\u7537\u5b50\u5355\u6253\u200b\uff1a\n1. \u200b\u6797\u8bd7\u680b\u200b - 8025 \u200b\u5206\u200b\n2. \u200b\u738b\u695a\u200b\u94a6\u200b - 7925 \u200b\u5206\u200b\n3. \u200b\u6881\u9756\u200b\u5d11\u200b - 5425 \u200b\u5206\u200b\n4. \u200b\u5f20\u672c\u200b\u667a\u200b\u548c\u200b - 4950 \u200b\u5206\u200b\n5. \u200b\u9a6c\u9f99\u200b - 4850 \u200b\u5206\u200b\n\n### \u200b\u5973\u5b50\u5355\u6253\u200b\uff1a\n1. \u200b\u5b59\u9896\u838e\u200b - 11300 \u200b\u5206\u200b\n2. \u200b\u738b\u66fc\u6631\u200b - 8850 \u200b\u5206\u200b\n3. \u200b\u738b\u827a\u8fea\u200b - 5425 \u200b\u5206\u200b\n4. \u200b\u9648\u5e78\u200b\u540c\u200b - 4250 \u200b\u5206\u200b\n5. \u200b\u65e9\u7530\u5e0c\u5a1c\u200b - 4200 \u200b\u5206\u200b\n\n\u200b\u4ee5\u4e0a\u200b\u6570\u636e\u200b\u6765\u6e90\u4e8e\u200b[\u200b\u4e16\u754c\u200b\u4e52\u8054\u200b\u6700\u65b0\u200b\u6392\u540d\u200b](http://www.baidu.com/link?url=s8C6OqE8cFjCm09asXg5hNcgb4I1-jxnlk_cyyY3R_o9H3oirLenCJ3WPh2G76tYCRePLavp0IhnsKmW5rJIn5ByXntcmlg73kuNnqtlveO)\u3002\n</code></pre>"},{"location":"message/","title":"Message","text":""},{"location":"message/#how-to-use","title":"How to use","text":"Code <pre><code>import PIL.Image\nfrom lumix.types.messages import *\nfrom lumix.llm import OpenAI\n\nmessages = [\n    SystemMessage(content=\"You are a AI assistant.\"),\n    UserMessage(content=\"\u200b\u4f60\u597d\u200b\"),\n    AssistantMessage(content=\"\u200b\u4f60\u597d\u200b, \u200b\u6211\u200b\u662f\u200bAI\u200b\u52a9\u624b\u200b\u3002\u200b\u6709\u200b\u4ec0\u4e48\u200b\u53ef\u4ee5\u200b\u5e2e\u52a9\u200b\u4f60\u200b\u7684\u200b\u5417\u200b\uff1f\"),\n    ImageMessage(\n        content=\"\u200b\u4ecb\u7ecd\u200b\u8fd9\u200b\u4e09\u5f20\u200b\u56fe\u7247\u200b\", \n        images=[\n            \"https://test.png\", \n            PIL.Image.Image, \n            \"base64,data: image/png;base64,\"\n        ]\n    ),\n]\n\n\nllm = OpenAI(\n    model=\"qwen\", api_key=\"your_api_key\", \n    base_url=\"https://api.openai.com/v1\")\nresponse = llm.completion(messages=messages)\n\nprint(response)\n</code></pre>"},{"location":"message/#basemessage","title":"BaseMessage","text":""},{"location":"message/#systemmessage","title":"SystemMessage","text":"CodeExample <pre><code>from lumix.types.messages import *\n\nsystem_message = SystemMessage(content=\"\u200b\u4f60\u597d\u200b\")\nprint(system_message)\n</code></pre> <pre><code>role='system' content='\u200b\u4f60\u597d\u200b'\n</code></pre>"},{"location":"message/#usermessage","title":"UserMessage","text":"CodeExample <pre><code>from lumix.types.messages import *\nuser_message = UserMessage(content=\"\u200b\u4f60\u597d\u200b\")\nprint(user_message)\n</code></pre> <pre><code>role='user' content='\u200b\u4f60\u597d\u200b'\n</code></pre>"},{"location":"message/#assistantmessage","title":"AssistantMessage","text":"CodeExample <pre><code>from lumix.types.messages import *\nassistant_message = AssistantMessage(content=\"\u200b\u4f60\u597d\u200b\")\nprint(assistant_message)\n</code></pre> <pre><code>role='assistant' content='\u200b\u4f60\u597d\u200b'\n</code></pre>"},{"location":"message/#imagemessage","title":"ImageMessage","text":"CodeExample <pre><code>from lumix.types.messages import *\nimage_message = ImageMessage(\n    content=\"\u200b\u4ecb\u7ecd\u200b\u8fd9\u200b\u4e09\u5f20\u200b\u56fe\u7247\u200b\", \n    images=[\n        \"https://test.png\", \n        PIL.Image.Image, \n        \"base64,data: image/png;base64,\"\n    ]\n)\n\n# Object\nprint(image_message)\n# to openai message\nprint(image_message.to_openai())\n# to dict\nprint(image_message.to_dict())\n</code></pre> <pre><code># Object\nrole='assistant' content='\u200b\u4ecb\u7ecd\u200b\u8fd9\u200b\u4e09\u5f20\u200b\u56fe\u7247\u200b' images=['https://test.png', 'PIL.Image.Image', 'base64,data: image/png;base64,']\n\n# to openai message\n{\n    \"role\": \"user\",\n    \"content\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"\u200b\u4ecb\u7ecd\u200b\u8fd9\u200b\u4e09\u5f20\u200b\u56fe\u7247\u200b\"\n        },\n        {\n            \"type\": \"image_url\",\n            \"image_url\": {\n                \"url\": image_url\n            }\n        },\n        {\n            \"type\": \"image_url\",\n            \"image_url\": {\n                \"url\": image_url\n            }\n        },\n    ],\n}\n\n# to dict\n{\n    \"role\": \"user\",\n    \"content\": [\n        {\n            \"type\": \"text\",\n            \"text\": \"\u200b\u4ecb\u7ecd\u200b\u8fd9\u200b\u4e09\u5f20\u200b\u56fe\u7247\u200b\"\n        },\n        {\n            \"type\": \"image\",\n            \"image\": \"image_url\",\n        },\n        {\n            \"type\": \"image\",\n            \"image\": \"image_url\",\n        },\n    ],\n}\n</code></pre>"},{"location":"tools/","title":"Tools","text":""},{"location":"tools/#_1","title":"\u8054\u7f51\u200b\u641c\u7d22\u200b\u5de5\u5177","text":""},{"location":"tools/#_2","title":"\u767e\u5ea6\u200b\u641c\u7d22","text":"\u4ee3\u7801\u200b\u793a\u4f8b\u200bOutput <pre><code>from lumix.agent.tools import BaiduSearch\n\nbaidu = BaiduSearch(verbose=True)\nweb_data = baidu.search(query=\"\u200b\u676d\u5dde\u200b\u5929\u6c14\u200b\", pages=1)\nprint(web_data)\n</code></pre> <pre><code>page_content='\\n\u3010\u200b\u676d\u5dde\u200b\u5929\u6c14\u9884\u62a5\u200b15\u200b\u5929\u200b_\u200b\u676d\u5dde\u200b\u5929\u6c14\u9884\u62a5\u200b15\u200b\u5929\u200b\u67e5\u8be2\u200b\u3011-\u200b\u4e2d\u56fd\u200b\u5929\u6c14\u200b\u7f51\u200b\u00d7\u200b\u676d\u5dde\u200b\\n8~15\u200b\u5929\u200b\u5929\u6c14\u9884\u62a5\u200b\uff0c\u200b\u662f\u200b\u96c6\u5408\u200b\u591a\u5bb6\u200b\u5168\u7403\u200b\u6570\u503c\u200b\u5929\u6c14\u9884\u62a5\u200b\u6a21\u5f0f\u200b\u5ba2\u89c2\u200b\u9884\u62a5\u200b\u4ea7\u54c1\u200b\u52a0\u5de5\u200b\u800c\u6210\u200b\uff0c\u200b\u672a\u7ecf\u200b\u9884\u62a5\u5458\u200b\u4e3b\u89c2\u200b\u8ba2\u6b63\u200b\uff0c\u200b\u53cd\u6620\u200b\u672a\u6765\u200b\u4e00\u6bb5\u65f6\u95f4\u200b\u5185\u200b\u5929\u6c14\u200b\u53d8\u5316\u8d8b\u52bf\u200b\uff0c\u200b\u5177\u6709\u200b\u4e00\u5b9a\u200b\u7684\u200b\u4e0d\u786e\u5b9a\u6027\u200b\uff0c\u200b\u4f9b\u200b\u516c\u4f17\u200b\u53c2\u8003\u200b\uff0c\u200b\u6b32\u77e5\u200b\u66f4\u52a0\u200b\u51c6\u786e\u200b\u7684\u200b\u5929\u6c14\u9884\u62a5\u200b\u9700\u200b\u968f\u65f6\u200b\u5173\u6ce8\u200b\u77ed\u671f\u200b\u5929\u6c14\u9884\u62a5\u200b\u548c\u200b\u6700\u65b0\u200b\u9884\u62a5\u200b\u4fe1\u606f\u200b\u66f4\u65b0\u200b\u3002\\n\u200b\u4eca\u5929\u200b\\n03/21\\n\u200b\u6674\u200b26/12\u2103\u200b\u897f\u5357\u98ce\u200b4-5\u200b\u7ea7\u200b\\n\u200b\u897f\u5357\u98ce\u200b3-4\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u516d\u200b\\n03/22\\n\u200b\u6674\u200b26/14\u2103\u200b\u897f\u5357\u98ce\u200b3-4\u200b\u7ea7\u200b\\n\u200b\u897f\u5357\u98ce\u200b3-4\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u65e5\u200b\\n03/23\\n\u200b\u591a\u4e91\u200b28/14\u2103\u200b\u897f\u5357\u98ce\u200b4-5\u200b\u7ea7\u200b\\n\u200b\u897f\u98ce\u200b3-4\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u4e00\u200b\\n03/24\\n\u200b\u6674\u200b29/14\u2103\u200b\u897f\u98ce\u200b4-5\u200b\u7ea7\u200b\\n\u200b\u897f\u5357\u98ce\u200b3-4\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u4e8c\u200b\\n03/25\\n\u200b\u591a\u4e91\u8f6c\u9634\u200b32/17\u2103\u200b\u897f\u5357\u98ce\u200b5-6\u200b\u7ea7\u200b\\n\u200b\u65e0\u200b\u6301\u7eed\u200b\u98ce\u5411\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u4e09\u200b\\n03/26\\n\u200b\u591a\u4e91\u200b\u8f6c\u200b\u96f7\u9635\u96e8\u200b34/21\u2103\u200b\u5357\u98ce\u200b5-6\u200b\u7ea7\u200b\\n\u200b\u897f\u98ce\u200b3-4\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u56db\u200b\\n03/27\\n\u200b\u5c0f\u5230\u4e2d\u96e8\u200b\u8f6c\u200b\u5c0f\u96e8\u200b27/8\u2103\u200b\u4e1c\u5317\u98ce\u200b6-7\u200b\u7ea7\u200b\\n\u200b\u897f\u5317\u98ce\u200b5-6\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u4e94\u200b\\n03/28\\n\u200b\u96e8\u200b\u8f6c\u9634\u200b10/3\u2103\u200b\u897f\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u897f\u5317\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u516d\u200b\\n03/29\\n\u200b\u9634\u8f6c\u96e8\u200b13/6\u2103\u200b\u4e1c\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u4e1c\u5357\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u65e5\u200b\\n03/30\\n\u200b\u6674\u8f6c\u9634\u200b17/7\u2103\u200b\u4e1c\u5317\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u4e1c\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u4e00\u200b\\n03/31\\n\u200b\u9634\u200b20/8\u2103\u200b\u4e1c\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u4e1c\u5357\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u4e8c\u200b\\n04/01\\n\u200b\u9634\u8f6c\u96e8\u200b21/11\u2103\u200b\u4e1c\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u897f\u5317\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u4e09\u200b\\n04/02\\n\u200b\u96e8\u200b\u8f6c\u9634\u200b17/7\u2103\u200b\u4e1c\u5317\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u897f\u5357\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u56db\u200b\\n04/03\\n\u200b\u6674\u8f6c\u9634\u200b22/7\u2103\u200b\u4e1c\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u4e1c\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\u5468\u4e94\u200b\\n04/04\\n\u200b\u9634\u8f6c\u591a\u4e91\u200b21/9\u2103\u200b\u4e1c\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u4e1c\u5357\u98ce\u200b&lt;3\u200b\u7ea7\u200b\\n\u200b\u8be6\u60c5\u200b\\n40\u200b\u5929\u200b\u9884\u62a5\u200b\\n\u200b\u6e29\u5ea6\u200b\u8d8b\u52bf\u200b\\n\u200b\u964d\u6c34\u200b\u8d8b\u52bf\u200b\u53f0\u98ce\u200b\u4e2d\u5fc3\u200b\u5229\u5947\u9a6c\u200b\\n\u200b\u5230\u8fbe\u200b\u65f6\u95f4\u200b\uff1a\\n2020-05-16\\n\u200b\u4e2d\u5fc3\u200b\u4f4d\u7f6e\u200b\uff1a\\n18.6N/120.1E\\n\u200b\u98ce\u901f\u200b\u98ce\u529b\u200b\uff1a\\n16\u200b\u7c73\u200b/\u200b\u79d2\u200b\\n\u200b\u4e2d\u5fc3\u200b\u6c14\u538b\u200b\uff1a\\n1000\uff08\u200b\u767e\u5e15\u200b\uff09\\n\u200b\u672a\u6765\u200b\u79fb\u901f\u200b\uff1a\\n17\u200b\u516c\u91cc\u200b/\u200b\u5c0f\u65f6\u200b\\n\u200b\u672a\u6765\u200b\u79fb\u9879\u200b\uff1a\\n\u200b\u5317\u200b\\n\u200b\u5929\u6c14\u200b\u96f7\u8fbe\u200b\\n\u200b\u6211\u200b\u7684\u200b\u5929\u7a7a\u200b\u7cbe\u5f69\u200b\u63a8\u8350\u200b\\n \u200b\u6625\u5929\u200b\u5927\u5e45\u200b\u63d0\u524d\u200b\uff01 \u200b\u5168\u56fd\u200b\u6625\u5b63\u200b\u82b1\u7c89\u200b\u9884\u62a5\u5730\u56fe\u200b\u6765\u200b\u4e86\u200b \u200b\u68a6\u5e7b\u200b\u552f\u7f8e\u200b\uff01\u200b\u5317\u4eac\u200b\u6843\u82b1\u200b\u6620\u200b\u65e5\u51fa\u200b \u200b\u6625\u5206\u200b\uff1a\u200b\u6625\u8272\u200b\u6b63\u4e2d\u200b\u5206\u200b \u200b\u5343\u82b1\u200b\u767e\u5349\u4e89\u200b\u660e\u5a9a\u200b \u200b\u6668\u5473\u200b\u65f6\u8282\u200b\u2014\u2014\u200b\u6625\u5206\u200b \u200b\u5982\u4f55\u200b\u7406\u89e3\u200b\u4eca\u5e74\u200b\u6c14\u8c61\u65e5\u200b\u7684\u200b\u4e3b\u9898\u200b\\n\u200b\u672a\u6765\u200b3\u200b\u5929\u200b\u516c\u62a5\u200b\u672a\u6765\u200b10\u200b\u5929\u200b\u516c\u62a5\u200b \u200b\u5929\u6c14\u200b  \u200b\u63a8\u8350\u200b\\n\u200b\u76f4\u64ad\u200b\\n\u200b\u56fe\u96c6\u200b\\n\u200b\u77ed\u200b\u89c6\u9891\u200b\\n\u200b\u751f\u6d3b\u200b\\n\\r\\n          \u200b\u6ca1\u6709\u200b\u66f4\u200b\u591a\u200b\u5566\u200b ~\\r\\n        \\n\u200b\u8bf7\u200b\u4f7f\u7528\u200b\u6d4f\u89c8\u5668\u200b\u7684\u200b\u5206\u4eab\u200b\u529f\u80fd\u200b\u5206\u4eab\u200b\u9996\u9875\u200b \\n15\u200b\u5929\u200b \\n40\u200b\u5929\u200b \\n\u200b\u5730\u56fe\u200b \\n\u200b\u8d44\u8baf\u200b \\n\u200b\u66f4\u200b\u591a\u200b \\n\u200b\u6c14\u8c61\u200b\u6570\u636e\u200b\u6765\u6e90\u200b\uff1a\u200b\u4e2d\u592e\u6c14\u8c61\u53f0\u200b \\n\u200b\u9884\u62a5\u200b\u66f4\u65b0\u200b\u65f6\u95f4\u200b\uff1a\u200b\u6bcf\u65e5\u200b06\u300108\u300112\u300116\u300120\u200b\u65f6\u200b' metadata={'url': 'http://www.baidu.com/link?url=NLXajc-CXLQoFwlgK-nap57POT1dfLvR6YdwcV3qiPUSVmjiolmkOKptDLhVUpIFW4A48F-xmKWvJNGRaJEwAa', 'title': '\u3010\u200b\u676d\u5dde\u200b\u5929\u6c14\u9884\u62a5\u200b15\u200b\u5929\u200b_\u200b\u676d\u5dde\u200b\u5929\u6c14\u9884\u62a5\u200b15\u200b\u5929\u200b\u67e5\u8be2\u200b\u3011-\u200b\u4e2d\u56fd\u200b\u5929\u6c14\u200b\u7f51\u200b', 'abstract': '\u200b\u676d\u5dde\u200b\u5929\u6c14\u9884\u62a5\u200b,\u200b\u53ca\u65f6\u200b\u51c6\u786e\u200b\u53d1\u5e03\u200b\u4e2d\u592e\u6c14\u8c61\u53f0\u200b\u5929\u6c14\u200b\u4fe1\u606f\u200b,\u200b\u4fbf\u6377\u200b\u67e5\u8be2\u200b\u676d\u5dde\u200b\u4eca\u65e5\u200b\u5929\u6c14\u200b,\u200b\u676d\u5dde\u200b\u5468\u672b\u200b\u5929\u6c14\u200b,\u200b\u676d\u5dde\u200b\u4e00\u5468\u200b\u5929\u6c14\u9884\u62a5\u200b,\u200b\u676d\u5dde\u200b\u84dd\u5929\u200b\u9884\u62a5\u200b,\u200b\u676d\u5dde\u200b\u5929\u6c14\u9884\u62a5\u200b,\u200b\u676d\u5dde\u200b40\u200b\u65e5\u200b\u5929\u6c14\u9884\u62a5\u200b,\u200b\u8fd8\u200b\u63d0\u4f9b\u200b\u676d\u5dde\u200b\u7684\u200b\u751f\u6d3b\u200b\u6307\u6570\u200b\u3001\u200b\u5065\u200b...'}\n</code></pre>"},{"location":"tools/#_3","title":"\u767e\u5ea6\u200b\u56fe\u7247","text":"CodeOutput <pre><code>from lumix.agent.tools import BaiduImageSearch\n\nbaidu_image = BaiduImageSearch()\nimages = baidu_image.search('\u200b\u676d\u5dde\u200b\u897f\u6e56\u200b')\nprint(images[0].model_dump())\n</code></pre> <pre><code>{\n  'image': &lt;PIL.WebPImagePlugin.WebPImageFile image mode=RGB size=800x1422 at 0x19A69EA2C00&gt;, \n  'metadata': {\n    'image_url': 'https://img2.baidu.com/it/u=1166879536,4231434679&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=800&amp;h=1422', \n    'object_url': 'https://p3-pc-sign.douyinpic.com/tos-cn-i-0813c001/oIBHGOfpAIvwziAAl75CA0CSiYIAFESgejDAn6~tplv-dy-aweme-images:q75.webp', \n    'from_url': 'http://www.douyin.com/note/7405630334227860787', \n    'from_title': '\u200b\u8fd9\u8f88\u5b50\u200b\u603b\u8981\u200b\u548c\u200b\u5fc3\u7231\u200b\u7684\u200b\u4eba\u200b\u53bb\u4e00\u8d9f\u200b\u676d\u5dde\u200b\u897f\u6e56\u200b\u5427\u200b!\u200b\u6765\u200b\u5439\u200b\u5439\u200b\u897f\u6e56\u200b\u7684\u200b\u98ce\u200b'\n  }\n}\n</code></pre> <p>DataSchema </p> <ul> <li><code>image</code>: PIL\u200b\u7684\u200b\u56fe\u7247\u200b\u5bf9\u8c61\u200b</li> <li><code>metadata</code>:<ul> <li><code>image_url</code>: \u200b\u767e\u5ea6\u200b\u56fe\u5e8a\u200b\u7684\u200b\u56fe\u7247\u200b\u5730\u5740\u200b</li> <li><code>object_url</code>: \u200b\u56fe\u7247\u200b\u6e90\u5730\u5740\u200b</li> <li><code>from_url</code>: \u200b\u5185\u5bb9\u200b\u6765\u6e90\u200bURL</li> <li><code>from_title</code>: \u200b\u5185\u5bb9\u200b\u6807\u9898\u200b</li> </ul> </li> </ul> \u200b\u793a\u4f8b\u200b CodeOutput <pre><code>from lumix.llm import OpenAI\nfrom lumix.types.messages import ImageMessage\nfrom lumix.agent.tools import BaiduImageSearch\n\nbaidu_image = BaiduImageSearch(verbose=True)\nimages = baidu_image.search(query=\"\u200b\u6c7d\u8f66\u200b\u603b\u52a8\u5458\u200b\")\n\nprint(images)\n\nbase_url = \"https://api-inference.modelscope.cn/v1/\"\nmodel = \"Qwen/Qwen2.5-VL-32B-Instruct\"\nllm = OpenAI(model=model, base_url=base_url, key_name=\"MODELSCOPE_TOKEN\", verbose=False)\n\nmessages = [\n    ImageMessage(content=\"\u200b\u4ecb\u7ecd\u200b\u8fd9\u200b\u51e0\u5f20\u200b\u56fe\u7247\u200b\", images=[item.image for item in images]).to_openai(),\n]\n\ncompletion = llm.completion(messages=messages)\nprint(completion.choices[0].message.content)\n</code></pre> <pre><code>image=&lt;PIL.WebPImagePlugin.WebPImageFile image mode=RGB size=500x734 at 0x2417D469E20&gt; \n\nmetadata={\n  'image_url': 'https://img0.baidu.com/it/u=1098810270,2820787263&amp;fm=253&amp;fmt=auto&amp;app=138&amp;f=JPEG?w=500&amp;h=734', \n  'object_url': 'https://bkimg.cdn.bcebos.com/pic/d52a2834349b033b5bb5e8860e9721d3d539b600176c', \n  'from_url': 'http://baike.baidu.com/item/%E8%B5%9B%E8%BD%A6%E6%80%BB%E5%8A%A8%E5%91%98/55472022', \n  'from_title': '\u200b\u8d5b\u8f66\u200b&lt;strong&gt;\u200b\u603b\u52a8\u5458\u200b&lt;/strong&gt;'\n}\n\n### \u200b\u56fe\u7247\u200b\u4ecb\u7ecd\u200b\n\n#### **\u200b\u7b2c\u4e00\u5f20\u200b\u56fe\u7247\u200b**\n\u200b\u8fd9\u5f20\u200b\u56fe\u7247\u200b\u662f\u200b\u52a8\u753b\u7535\u5f71\u200b\u300a\u200b\u8d5b\u8f66\u200b\u603b\u52a8\u5458\u200b\u300b\uff08Cars\uff09\u200b\u7cfb\u5217\u200b\u7684\u200b\u5ba3\u4f20\u200b\u6d77\u62a5\u200b\uff0c\u200b\u5177\u4f53\u200b\u4e3a\u200b\u300a\u200b\u8d5b\u8f66\u200b\u603b\u52a8\u5458\u200b\uff1a\u200b\u5728\u200b\u8def\u4e0a\u200b\u300b\uff08Cars On The Road\uff09\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u56fe\u7247\u200b\u7684\u200b\u4e3b\u8981\u200b\u5185\u5bb9\u200b\u548c\u200b\u7ec6\u8282\u200b\uff1a\n\n1. **\u200b\u6807\u9898\u200b\u4fe1\u606f\u200b**\uff1a\n   - \u200b\u6d77\u62a5\u200b\u9876\u90e8\u200b\u5199\u200b\u7740\u200b\uff1a\u201cNINE NEW EPISODES, ONE EPIC ROAD TRIP.\u201d\uff08\u200b\u4e5d\u4e2a\u200b\u65b0\u5267\u200b\u96c6\u200b\uff0c\u200b\u4e00\u573a\u200b\u53f2\u8bd7\u200b\u822c\u7684\u200b\u516c\u8def\u200b\u4e4b\u65c5\u200b\uff09\uff0c\u200b\u8868\u660e\u200b\u8fd9\u662f\u200b\u4e00\u90e8\u200b\u5305\u542b\u200b\u591a\u4e2a\u200b\u6545\u4e8b\u200b\u7684\u200b\u8fde\u7eed\u5267\u200b\u6216\u200b\u8ff7\u4f60\u200b\u5267\u200b\u3002\n\n2. **\u200b\u4e3b\u8981\u200b\u89d2\u8272\u200b**\uff1a\n   - \u200b\u4e2d\u5fc3\u200b\u4f4d\u7f6e\u200b\u662f\u200b\u4e3b\u89d2\u200b\u95ea\u7535\u200b\u9ea6\u6606\u200b\uff08Lightning McQueen\uff09\uff0c\u200b\u7ea2\u8272\u200b\u8dd1\u8f66\u200b\uff0c\u200b\u8f66\u8eab\u200b\u6709\u200b\u6807\u5fd7\u6027\u200b\u7684\u200b\u201c95\u201d\u200b\u53f7\u200b\u3002\n   - \u200b\u5de6\u4fa7\u200b\u6709\u200b\u4e00\u8f86\u200b\u68d5\u8272\u200b\u5361\u8f66\u200b\uff0c\u200b\u53ef\u80fd\u200b\u662f\u200b\u62d6\u8f66\u200b\u6258\u9a6c\u65af\u200b\uff08Tow Mater\uff09\uff0c\u200b\u8868\u60c5\u200b\u5938\u5f20\u200b\uff0c\u200b\u663e\u5f97\u200b\u975e\u5e38\u200b\u5174\u594b\u200b\u3002\n   - \u200b\u5176\u4ed6\u200b\u89d2\u8272\u200b\u5305\u62ec\u200b\u4e00\u4e2a\u200b\u9ec4\u8272\u200b\u5c0f\u8f66\u200b\u3001\u200b\u4e00\u53ea\u200b\u6050\u9f99\u200b\u5f62\u72b6\u200b\u7684\u200b\u602a\u7269\u200b\u3001\u200b\u4ee5\u53ca\u200b\u4e00\u4e9b\u200b\u5176\u4ed6\u200b\u8f66\u8f86\u200b\u89d2\u8272\u200b\uff0c\u200b\u8425\u9020\u200b\u51fa\u200b\u4e00\u79cd\u200b\u70ed\u95f9\u200b\u548c\u200b\u5192\u9669\u200b\u7684\u200b\u6c1b\u56f4\u200b\u3002\n\n3. **\u200b\u80cc\u666f\u200b\u5143\u7d20\u200b**\uff1a\n   - \u200b\u80cc\u666f\u200b\u662f\u200b\u4e00\u4e2a\u200b\u5145\u6ee1\u6d3b\u529b\u200b\u7684\u200b\u591c\u666f\u200b\uff0c\u200b\u5929\u7a7a\u200b\u4e2d\u6709\u200b\u70df\u82b1\u200b\u548c\u200b\u964d\u843d\u4f1e\u200b\uff0c\u200b\u6697\u793a\u7740\u200b\u5e86\u795d\u200b\u6216\u200b\u5192\u9669\u200b\u7684\u200b\u4e3b\u9898\u200b\u3002\n   - \u200b\u5730\u9762\u200b\u662f\u200b\u4e00\u6761\u200b\u5bbd\u9614\u200b\u7684\u200b\u9053\u8def\u200b\uff0c\u200b\u9053\u8def\u200b\u4e0a\u200b\u6709\u200b\u8bb8\u591a\u200b\u8f66\u8f86\u200b\uff0c\u200b\u663e\u793a\u200b\u51fa\u200b\u96c6\u4f53\u200b\u65c5\u884c\u200b\u7684\u200b\u611f\u89c9\u200b\u3002\n   - \u200b\u8fdc\u5904\u200b\u53ef\u4ee5\u200b\u770b\u5230\u200b\u5efa\u7b51\u7269\u200b\u548c\u200b\u9713\u8679\u706f\u200b\u62db\u724c\u200b\uff0c\u200b\u589e\u52a0\u200b\u4e86\u200b\u57ce\u5e02\u200b\u6216\u200b\u5c0f\u9547\u200b\u7684\u200b\u6c1b\u56f4\u200b\u3002\n\n4. **\u200b\u54c1\u724c\u200b\u6807\u8bc6\u200b**\uff1a\n   - \u200b\u5e95\u90e8\u200b\u6709\u200b\u201cDisney Pixar Cars\u201d\u200b\u5b57\u6837\u200b\uff0c\u200b\u660e\u786e\u200b\u8fd9\u662f\u200b\u8fea\u58eb\u5c3c\u200b\u00b7\u200b\u76ae\u514b\u65af\u200b\uff08Disney\u00b7Pixar\uff09\u200b\u5236\u4f5c\u200b\u7684\u200b\u4f5c\u54c1\u200b\u3002\n   - \u200b\u53f3\u4e0b\u89d2\u200b\u6709\u200b\u201cCars On The Road\u201d\u200b\u7684\u200b\u6807\u9898\u200b\uff0c\u200b\u4ee5\u53ca\u200b\u201cDisney+ Day Premiere, Sept 8 only on Disney+\u201d\uff0c\u200b\u8868\u660e\u200b\u8fd9\u200b\u662f\u200b\u5728\u200bDisney+\u200b\u5e73\u53f0\u200b\u72ec\u5bb6\u200b\u64ad\u51fa\u200b\u7684\u200b\u5185\u5bb9\u200b\uff0c\u200b\u5e76\u4e14\u200b\u662f\u200b\u5728\u200b\u67d0\u4e2a\u200b\u7279\u5b9a\u200b\u65e5\u671f\u200b\u9996\u6620\u200b\u3002\n\n---\n\n#### **\u200b\u7b2c\u4e8c\u5f20\u200b\u56fe\u7247\u200b**\n\u200b\u8fd9\u5f20\u200b\u56fe\u7247\u200b\u5c55\u793a\u200b\u4e86\u200b\u300a\u200b\u8d5b\u8f66\u200b\u603b\u52a8\u5458\u200b\u300b\u200b\u7cfb\u5217\u200b\u4e2d\u200b\u7684\u200b\u4e3b\u89d2\u200b\u2014\u2014\u200b\u95ea\u7535\u200b\u9ea6\u6606\u200b\uff08Lightning McQueen\uff09\u3002\u200b\u4ee5\u4e0b\u200b\u662f\u200b\u56fe\u7247\u200b\u7684\u200b\u4e3b\u8981\u200b\u5185\u5bb9\u200b\u548c\u200b\u7ec6\u8282\u200b\uff1a\n\n1. **\u200b\u89d2\u8272\u200b\u5f62\u8c61\u200b**\uff1a\n   - \u200b\u95ea\u7535\u200b\u9ea6\u6606\u200b\u662f\u200b\u4e00\u8f86\u200b\u7ea2\u8272\u200b\u7684\u200b\u8d5b\u8f66\u200b\uff0c\u200b\u8f66\u8eab\u200b\u8bbe\u8ba1\u200b\u6d41\u7545\u200b\uff0c\u200b\u5e26\u6709\u200b\u660e\u663e\u200b\u7684\u200b\u901f\u5ea6\u611f\u200b\u3002\n   - \u200b\u8f66\u8eab\u200b\u4fa7\u9762\u200b\u6709\u200b\u201c95\u201d\u200b\u53f7\u200b\uff0c\u200b\u8fd9\u200b\u662f\u200b\u4ed6\u200b\u7684\u200b\u6807\u5fd7\u6027\u200b\u53f7\u7801\u200b\u3002\n   - \u200b\u9762\u90e8\u200b\u8868\u60c5\u200b\u53cb\u597d\u200b\uff0c\u200b\u773c\u775b\u200b\u5927\u800c\u200b\u660e\u4eae\u200b\uff0c\u200b\u5634\u5df4\u200b\u5fae\u7b11\u200b\u7740\u200b\uff0c\u200b\u663e\u5f97\u200b\u81ea\u4fe1\u200b\u4e14\u200b\u5bcc\u6709\u200b\u4eb2\u548c\u529b\u200b\u3002\n\n2. **\u200b\u7ec6\u8282\u200b\u7279\u5f81\u200b**\uff1a\n   - \u200b\u8f66\u5934\u200b\u90e8\u5206\u200b\u6709\u200b\u84dd\u8272\u200b\u7684\u200b\u5927\u706f\u200b\uff0c\u200b\u663e\u5f97\u200b\u975e\u5e38\u200b\u9192\u76ee\u200b\u3002\n   - \u200b\u8f66\u8f6e\u200b\u8bbe\u8ba1\u200b\u7cbe\u81f4\u200b\uff0c\u200b\u8f6e\u80ce\u200b\u548c\u200b\u8f6e\u6bc2\u200b\u90fd\u200b\u7ecf\u8fc7\u200b\u7cbe\u5fc3\u200b\u63cf\u7ed8\u200b\u3002\n   - \u200b\u6574\u4f53\u200b\u9020\u578b\u200b\u5145\u6ee1\u200b\u4e86\u200b\u52a8\u611f\u200b\uff0c\u200b\u7b26\u5408\u200b\u5176\u200b\u4f5c\u4e3a\u200b\u8d5b\u8f66\u200b\u7684\u200b\u89d2\u8272\u200b\u8bbe\u5b9a\u200b\u3002\n\n3. **\u200b\u6587\u5b57\u200b\u4fe1\u606f\u200b**\uff1a\n   - \u200b\u5de6\u4e0a\u89d2\u200b\u6709\u200b\u201cDisney Pixar Cars\u201d\u200b\u6807\u5fd7\u200b\uff0c\u200b\u8868\u660e\u200b\u8fd9\u662f\u200b\u300a\u200b\u8d5b\u8f66\u200b\u603b\u52a8\u5458\u200b\u300b\u200b\u7cfb\u5217\u200b\u7684\u200b\u4e00\u90e8\u5206\u200b\u3002\n   - \u200b\u53f3\u4e0b\u89d2\u200b\u5199\u200b\u7740\u200b\u201cLIGHTNING MCQUEEN\u201d\uff0c\u200b\u786e\u8ba4\u200b\u4e86\u200b\u89d2\u8272\u200b\u540d\u79f0\u200b\u3002\n   - \u200b\u5e95\u90e8\u200b\u7684\u200b\u6587\u5b57\u8bf4\u660e\u200b\uff1a\u201c\u2018CARS 2\u2019 Lightning McQueen (voice by Owen Wilson) \u00a9Disney/Pixar. All Rights Reserved.\u201d\uff0c\u200b\u8868\u660e\u200b\u8fd9\u662f\u200b\u300a\u200b\u8d5b\u8f66\u200b\u603b\u52a8\u5458\u200b2\u300b\u200b\u4e2d\u200b\u7684\u200b\u89d2\u8272\u200b\uff0c\u200b\u914d\u97f3\u6f14\u5458\u200b\u662f\u200b\u6b27\u6587\u200b\u00b7\u200b\u5a01\u5c14\u900a\u200b\uff08Owen Wilson\uff09\uff0c\u200b\u5e76\u200b\u58f0\u660e\u200b\u7248\u6743\u200b\u5f52\u5c5e\u200b\u8fea\u58eb\u5c3c\u200b\u00b7\u200b\u76ae\u514b\u65af\u200b\u3002\n\n4. **\u200b\u80cc\u666f\u200b**\uff1a\n   - \u200b\u80cc\u666f\u200b\u4e3a\u200b\u7eaf\u767d\u8272\u200b\uff0c\u200b\u7a81\u51fa\u200b\u4e86\u200b\u95ea\u7535\u200b\u9ea6\u6606\u200b\u7684\u200b\u5f62\u8c61\u200b\uff0c\u200b\u4f7f\u200b\u5176\u200b\u6210\u4e3a\u200b\u753b\u9762\u200b\u7684\u200b\u7126\u70b9\u200b\u3002\n\n---\n\n### \u200b\u603b\u7ed3\u200b\n- **\u200b\u7b2c\u4e00\u5f20\u200b\u56fe\u7247\u200b**\u200b\u662f\u200b\u300a\u200b\u8d5b\u8f66\u200b\u603b\u52a8\u5458\u200b\uff1a\u200b\u5728\u200b\u8def\u4e0a\u200b\u300b\u200b\u7684\u200b\u5ba3\u4f20\u200b\u6d77\u62a5\u200b\uff0c\u200b\u5c55\u793a\u200b\u4e86\u200b\u591a\u4e2a\u200b\u89d2\u8272\u200b\u548c\u200b\u5145\u6ee1\u200b\u5192\u9669\u200b\u7684\u200b\u573a\u666f\u200b\uff0c\u200b\u5f3a\u8c03\u200b\u4e86\u200b\u8fd9\u90e8\u200b\u4f5c\u54c1\u200b\u7684\u200b\u8fde\u7eed\u6027\u200b\u548c\u200b\u8da3\u5473\u6027\u200b\u3002\n- **\u200b\u7b2c\u4e8c\u5f20\u200b\u56fe\u7247\u200b**\u200b\u662f\u200b\u300a\u200b\u8d5b\u8f66\u200b\u603b\u52a8\u5458\u200b\u300b\u200b\u7cfb\u5217\u200b\u4e2d\u200b\u7684\u200b\u4e3b\u89d2\u200b\u95ea\u7535\u200b\u9ea6\u6606\u200b\u7684\u200b\u5355\u72ec\u200b\u5c55\u793a\u200b\u56fe\u200b\uff0c\u200b\u7a81\u51fa\u200b\u4e86\u200b\u4ed6\u200b\u7684\u200b\u7ecf\u5178\u200b\u5f62\u8c61\u200b\u548c\u200b\u89d2\u8272\u200b\u7279\u70b9\u200b\u3002\n\n\u200b\u8fd9\u200b\u4e24\u5f20\u200b\u56fe\u7247\u200b\u5171\u540c\u200b\u4f53\u73b0\u200b\u4e86\u200b\u300a\u200b\u8d5b\u8f66\u200b\u603b\u52a8\u5458\u200b\u300b\u200b\u7cfb\u5217\u200b\u7684\u200b\u6d3b\u529b\u200b\u4e0e\u200b\u9b45\u529b\u200b\uff0c\u200b\u65e0\u8bba\u662f\u200b\u6574\u4f53\u200b\u5267\u60c5\u200b\u8fd8\u662f\u200b\u5355\u4e2a\u200b\u89d2\u8272\u200b\uff0c\u200b\u90fd\u200b\u5145\u6ee1\u200b\u4e86\u200b\u52a8\u611f\u200b\u548c\u200b\u5438\u5f15\u529b\u200b\u3002\n</code></pre>"},{"location":"api/llm/","title":"Llm","text":""},{"location":"api/llm/#lumix.llm.completion.openai.OpenAI","title":"OpenAI","text":"<pre><code>OpenAI(\n    model: str,\n    base_url: Optional[str] = \"https://api.openai.com/v1\",\n    api_key: Optional[str] = None,\n    key_name: Optional[str] = None,\n    client: Optional[OpenAI] = None,\n    verbose: Optional[bool] = False,\n    logger: Optional[Union[Logger, Callable]] = None,\n    **kwargs: Any\n)\n</code></pre> <p>Initialize a new instance of OpenAI client.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>str</code> <p>The model to use for completion.</p> required <code>base_url</code> <code>Optional[str]</code> <p>The base URL of the API endpoint.</p> <code>'https://api.openai.com/v1'</code> <code>api_key</code> <code>Optional[str]</code> <p>The API key used for authentication.</p> <code>None</code> <code>key_name</code> <code>Optional[str]</code> <p>The name of the API key used for authentication. If not provided, the first API key in the environment variables will be used.</p> <code>None</code> <code>client</code> <code>Optional[OpenAI]</code> <p>The HTTP client instance used to make requests to the API. This could be an instance of a library like <code>requests</code> or a custom client implementation.</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>A boolean flag indicating whether to enable verbose output. When set to True, additional debugging information or logs will be displayed.</p> <code>False</code> <code>logger</code> <code>Optional[Union[Logger, Callable]]</code> <p>A logger instance used for logging messages.</p> <code>None</code> <code>**kwargs</code> <code>Any</code> <p>Additional keyword arguments.</p> <code>{}</code> <p>Examples:     <pre><code>from lumix.llm import OpenAI\n\nbase_url = \"https://open.bigmodel.cn/api/paas/v4\"\nllm = OpenAI(model=\"glm-4-flash\", base_url=base_url, api_key=\"your_api_key\")\n</code></pre></p> Source code in <code>lumix\\llm\\completion\\openai.py</code> <pre><code>def __init__(\n        self,\n        model: str,\n        base_url: Optional[str] = \"https://api.openai.com/v1\",\n        api_key: Optional[str] = None,\n        key_name: Optional[str] = None,\n        client: Optional[OpenAIOriginal] = None,\n        verbose: Optional[bool] = False,\n        logger: Optional[Union[Logger, Callable]] = None,\n        **kwargs: Any,\n):\n    \"\"\" Initialize a new instance of OpenAI client.\n\n    Args:\n        model:\n            The model to use for completion.\n        base_url:\n            The base URL of the API endpoint.\n        api_key:\n            The API key used for authentication.\n        key_name:\n            The name of the API key used for authentication. If not provided, the first\n            API key in the environment variables will be used.\n        client:\n            The HTTP client instance used to make requests to the API. This could be an instance\n            of a library like `requests` or a custom client implementation.\n        verbose:\n            A boolean flag indicating whether to enable verbose output. When set to True,\n            additional debugging information or logs will be displayed.\n        logger:\n            A logger instance used for logging messages.\n        **kwargs:\n            Additional keyword arguments.\n    Examples:\n        ```python\n        from lumix.llm import OpenAI\n\n        base_url = \"https://open.bigmodel.cn/api/paas/v4\"\n        llm = OpenAI(model=\"glm-4-flash\", base_url=base_url, api_key=\"your_api_key\")\n        ```\n    \"\"\"\n    self.model = model\n    self.base_url = base_url\n    self.api_key = api_key\n    self.key_name = key_name\n    self.set_client(client)\n    self.logger = logger\n    self.verbose = verbose\n    self.kwargs = kwargs\n</code></pre>"},{"location":"api/llm/#lumix.llm.completion.openai.OpenAI.completion","title":"completion","text":"<pre><code>completion(\n    prompt: Optional[str] = None,\n    messages: Optional[\n        Union[List[TypeMessage], List[Dict]]\n    ] = None,\n    stream: Optional[bool] = False,\n    tools: List[Dict] = None,\n    **kwargs\n) -&gt; Union[ChatCompletion, Stream[ChatCompletionChunk]]\n</code></pre> <p>Call OpenAI API to get a completion.</p> <p>Parameters:</p> Name Type Description Default <code>prompt</code> <code>Optional[str]</code> <p>The prompt to generate a completion.</p> <code>None</code> <code>messages</code> <code>Optional[Union[List[TypeMessage], List[Dict]]]</code> <p>The messages to generate a completion.</p> <code>None</code> <code>stream</code> <code>Optional[bool]</code> <p>Whether to stream the response or not.</p> <code>False</code> <code>tools</code> <code>List[Dict]</code> <p>The tools to generate a completion.</p> <code>None</code> <code>**kwargs</code> <code>{}</code> <p>Returns:</p> Type Description <code>Union[ChatCompletion, Stream[ChatCompletionChunk]]</code> <p>Union[ChatCompletion, Stream[ChatCompletionChunk]]</p> <p>Examples:</p> <pre><code>completion = self.llm.completion(prompt=\"\u200b\u4f60\u597d\u200b\")\nprint(completion.choices[0].message.content)\n</code></pre> Source code in <code>lumix\\llm\\completion\\openai.py</code> <pre><code>def completion(\n        self,\n        prompt: Optional[str] = None,\n        messages: Optional[Union[List[TypeMessage], List[Dict]]] = None,\n        stream: Optional[bool] = False,\n        tools: List[Dict] = None,\n        **kwargs,\n) -&gt; Union[ChatCompletion, Stream[ChatCompletionChunk]]:\n    \"\"\" Call OpenAI API to get a completion.\n\n    Args:\n        prompt: The prompt to generate a completion.\n        messages: The messages to generate a completion.\n        stream: Whether to stream the response or not.\n        tools: The tools to generate a completion.\n        **kwargs:\n\n    Returns:\n        Union[ChatCompletion, Stream[ChatCompletionChunk]]\n\n    Examples:\n        ```python\n        completion = self.llm.completion(prompt=\"\u200b\u4f60\u597d\u200b\")\n        print(completion.choices[0].message.content)\n        ```\n    \"\"\"\n    if prompt is not None:\n        messages = [Message(role=\"user\", content=prompt)]\n\n    if not isinstance(messages[0], dict):\n        messages = [msg.to_dict() for msg in messages]\n\n    self._logger(msg=f\"[User] {messages[-1].get(\"content\")}\\n\", color=\"blue\")\n    completion = self.client.chat.completions.create(\n        model=self.model, messages=messages, tools=tools, stream=stream, **kwargs)\n    if stream:\n        return self.sse(completion)\n    else:\n        return self.sync(completion)\n</code></pre>"},{"location":"api/llm/#lumix.llm.completion.openai.OpenAI.sse","title":"sse","text":"<pre><code>sse(\n    completion: Stream[ChatCompletionChunk],\n) -&gt; Stream[ChatCompletionChunk]\n</code></pre> Source code in <code>lumix\\llm\\completion\\openai.py</code> <pre><code>def sse(self, completion: Stream[ChatCompletionChunk]) -&gt; Stream[ChatCompletionChunk]:\n    \"\"\"\"\"\"\n    content = \"\"\n    for chunk in completion:\n        if chunk.choices[0].delta.content is not None:\n            content += chunk.choices[0].delta.content\n        yield chunk\n    self._logger(msg=f\"[Assistant] {content}\\n\", color=\"green\")\n</code></pre>"},{"location":"api/llm/#lumix.llm.completion.openai.OpenAI.sync","title":"sync","text":"<pre><code>sync(completion: ChatCompletion) -&gt; ChatCompletion\n</code></pre> Source code in <code>lumix\\llm\\completion\\openai.py</code> <pre><code>def sync(self, completion: ChatCompletion) -&gt; ChatCompletion:\n    \"\"\"\"\"\"\n    self._logger(msg=f\"[Assistant] {completion.choices[0].message.content}\\n\", color=\"green\")\n    return completion\n</code></pre>"},{"location":"api/llm/#lumix.llm.completion.openai.OpenAI.structured_schema","title":"structured_schema","text":"<pre><code>structured_schema(schema: ModelMetaclass) -&gt; List[Dict]\n</code></pre> Source code in <code>lumix\\llm\\completion\\openai.py</code> <pre><code>def structured_schema(self, schema: ModelMetaclass,) -&gt; List[Dict]:\n    \"\"\"\"\"\"\n    json_schema = schema.model_json_schema()\n    schema_tools = [{\n        'type': 'function',\n        'function': {\n            'name': json_schema.get(\"title\"),\n            'description': json_schema.get(\"description\"),\n            \"parameters\": {\n                \"type\": \"object\",\n                'properties': json_schema.get(\"properties\"),\n                'required': json_schema.get(\"required\")\n            },\n        }}]\n    return schema_tools\n</code></pre>"},{"location":"api/llm/#lumix.llm.completion.openai.OpenAI.parse_dict","title":"parse_dict","text":"<pre><code>parse_dict(arguments: str) -&gt; Dict\n</code></pre> Source code in <code>lumix\\llm\\completion\\openai.py</code> <pre><code>def parse_dict(self, arguments: str) -&gt; Dict:\n    \"\"\"\"\"\"\n    try:\n        return json.loads(arguments)\n    except Exception as e:\n        raise ValueError(f\"Invalid JSON: {e}\")\n</code></pre>"},{"location":"api/llm/#lumix.llm.completion.openai.OpenAI.structured_output","title":"structured_output","text":"<pre><code>structured_output(\n    schema: ModelMetaclass,\n    prompt: Optional[str] = None,\n    messages: Optional[\n        Union[List[TypeMessage], List[Dict]]\n    ] = None,\n    **kwargs\n) -&gt; Dict\n</code></pre> <p>\u200b\u7ed3\u6784\u5316\u200b\u8f93\u51fa\u200b</p> <p>Parameters:</p> Name Type Description Default <code>schema</code> <code>ModelMetaclass</code> <p>\u200b\u8f93\u51fa\u200b\u7ed3\u6784\u200bScheme</p> required <code>prompt</code> <code>Optional[str]</code> <p>prompt</p> <code>None</code> <code>messages</code> <code>Optional[Union[List[TypeMessage], List[Dict]]]</code> <p>messages</p> <code>None</code> <code>**kwargs</code> <code>{}</code> <p>Returns:</p> Type Description <code>Dict</code> <p>\u200b\u7ed3\u6784\u5316\u200b\u6570\u636e\u200b</p> <p>Examples:</p> <pre><code>class Joke(BaseModel):\n    '''Joke to tell user.'''\n    setup: str = Field(description=\"The setup of the joke\")\n    punchline: str = Field(description=\"The punchline to the joke\")\n    rating: int = Field(description=\"How funny the joke is, from 1 to 10\")\n\ndata = self.llm.structured_output(schema=Joke, prompt=\"\u200b\u7ed9\u200b\u6211\u200b\u8bb2\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u7b11\u8bdd\u200b\")\npprint(data)\n</code></pre> Source code in <code>lumix\\llm\\completion\\openai.py</code> <pre><code>def structured_output(\n        self,\n        schema: ModelMetaclass,\n        prompt: Optional[str] = None,\n        messages: Optional[Union[List[TypeMessage], List[Dict]]] = None,\n        **kwargs\n) -&gt; Dict:\n    \"\"\"\u200b\u7ed3\u6784\u5316\u200b\u8f93\u51fa\u200b\n\n    Args:\n        schema: \u200b\u8f93\u51fa\u200b\u7ed3\u6784\u200bScheme\n        prompt: prompt\n        messages: messages\n        **kwargs:\n\n    Returns:\n        \u200b\u7ed3\u6784\u5316\u200b\u6570\u636e\u200b\n\n    Examples:\n        ```python\n        class Joke(BaseModel):\n            '''Joke to tell user.'''\n            setup: str = Field(description=\"The setup of the joke\")\n            punchline: str = Field(description=\"The punchline to the joke\")\n            rating: int = Field(description=\"How funny the joke is, from 1 to 10\")\n\n        data = self.llm.structured_output(schema=Joke, prompt=\"\u200b\u7ed9\u200b\u6211\u200b\u8bb2\u4e2a\u200b\u7b80\u5355\u200b\u7684\u200b\u7b11\u8bdd\u200b\")\n        pprint(data)\n        ```\n\n    \"\"\"\n    schema_tools = self.structured_schema(schema)\n    completion = self.completion(\n        prompt=prompt, messages=messages, stream=False, tools=schema_tools, **kwargs)\n    if completion.choices[0].message.tool_calls is not None:\n        return self.parse_dict(completion.choices[0].message.tool_calls[0].function.arguments)\n    else:\n        content = completion.choices[0].message.content\n        self.error(msg=f\"[{__class__.__name__}] No structured data found in the response: {content}\")\n        return {}\n</code></pre>"},{"location":"api/search/","title":"Search","text":""},{"location":"api/search/#lumix.agent.tools.search.baidu.BaiduSearch","title":"BaiduSearch","text":"<pre><code>BaiduSearch(\n    api_key: Optional[str] = None,\n    key_name: Optional[str] = \"BAIDU_SEARCH\",\n    logger: Optional[Callable] = None,\n    verbose: Optional[bool] = False,\n)\n</code></pre> <p>\u200b\u767e\u5ea6\u200b\u641c\u7d22\u200b\u5de5\u5177\u200b</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>Optional[str]</code> <code>None</code> <code>key_name</code> <code>Optional[str]</code> <code>'BAIDU_SEARCH'</code> <code>logger</code> <code>Optional[Callable]</code> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <code>False</code> Source code in <code>lumix\\agent\\tools\\search\\baidu.py</code> <pre><code>def __init__(\n        self,\n        api_key: Optional[str] = None,\n        key_name: Optional[str] = \"BAIDU_SEARCH\",\n        logger: Optional[Callable] = None,\n        verbose: Optional[bool] = False,\n):\n    \"\"\"\u200b\u767e\u5ea6\u200b\u641c\u7d22\u200b\u5de5\u5177\u200b\n\n    Args:\n        api_key:\n        key_name:\n        logger:\n        verbose:\n    \"\"\"\n    self.logger = logger\n    self.verbose = verbose\n    self.set_api_key(api_key, key_name)\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu.BaiduSearch.set_api_key","title":"set_api_key","text":"<pre><code>set_api_key(\n    api_key: Optional[str] = None,\n    key_name: Optional[str] = None,\n)\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu.py</code> <pre><code>def set_api_key(self, api_key: Optional[str] = None, key_name: Optional[str] = None):\n    \"\"\"\"\"\"\n    if api_key is not None:\n        self.headers[\"Cookie\"] = api_key\n    elif key_name is not None and os.getenv(key_name):\n        self.headers[\"Cookie\"] = os.getenv(key_name)\n    else:\n        raise ValueError(\"Please set api_key or key_name\")\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu.BaiduSearch.make_params","title":"make_params","text":"<pre><code>make_params(query: str, page: int = 0) -&gt; dict\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu.py</code> <pre><code>def make_params(self, query: str, page: int = 0) -&gt; dict:\n    \"\"\"\"\"\"\n    random_str = f\"{time.time()}{random.random()}\".encode()\n    rsv_pq = hashlib.md5(random_str).hexdigest()\n\n    timestamp = int(time.time() * 1000)\n    random_part = base64.b64encode(\n        hashlib.sha1(str(random.random()).encode()).digest()\n    ).decode()[:8]\n\n    return {\n        \"ie\": \"utf-8\",\n        \"tn\": \"baidu\",\n        \"wd\": query,\n        \"base_query\": query,\n        \"oq\": query,\n        \"pn\": str(int(page * 10)),\n        \"rsv_pq\": rsv_pq,\n        \"rsv_t\": f\"{timestamp}{random_part}\",\n    }\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu.BaiduSearch.parse_metadata","title":"parse_metadata","text":"<pre><code>parse_metadata(div: Tag)\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu.py</code> <pre><code>def parse_metadata(self, div: Tag):\n    \"\"\"\"\"\"\n    url = div.find(name=\"a\").get(\"href\")\n    title = div.find(name=\"a\").text\n    span = div.select('span[class^=\"content-right_\"]')\n    abstract = span[0].text if len(span) &gt; 0 else \"\"\n    return {\"url\": url, \"title\": title, \"abstract\": abstract}\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu.BaiduSearch.parse_html","title":"parse_html","text":"<pre><code>parse_html(soup: BeautifulSoup) -&gt; List[Dict]\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu.py</code> <pre><code>def parse_html(self, soup: BeautifulSoup) -&gt; List[Dict]:\n    \"\"\"\"\"\"\n    div_c_container = soup.select('div[class=\"c-container\"]')\n    metadata = list(map(self.parse_metadata, div_c_container))\n    return metadata\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu.BaiduSearch.web_content","title":"web_content","text":"<pre><code>web_content(url) -&gt; str\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu.py</code> <pre><code>def web_content(self, url) -&gt; str:\n    \"\"\"\"\"\"\n    try:\n        response = requests.get(url, headers=NORMAL_HEADERS)\n        detected = chardet.detect(response.content)\n        soup = BeautifulSoup(response.content, from_encoding=detected['encoding'], features=\"html.parser\")\n        return soup.text\n    except Exception as e:\n        self.warning(msg=f\"[{__class__.__name__}] URL: {url}, Error: {str(e)}\")\n        return \"\"\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu.BaiduSearch.search","title":"search","text":"<pre><code>search(\n    query: str, pages: Optional[int] = 10\n) -&gt; List[DocumentPage]\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu.py</code> <pre><code>def search(self, query: str, pages: Optional[int] = 10) -&gt; List[DocumentPage]:\n    \"\"\"\"\"\"\n    metadata = []\n    page = 0\n    while len(metadata) &lt;= pages:\n        params = self.make_params(query, page=page)\n        url = assemble_url(self.base_url, params)\n        response = requests.get(url, headers=self.headers)\n        soup = BeautifulSoup(response.text, features=\"html.parser\")\n        _metadata = self.parse_html(soup)\n        metadata.extend(_metadata)\n        page += 1\n        if len(_metadata) == 0:\n            break\n    metadata = metadata[:pages]\n    self.info(msg=f\"[{__class__.__name__}] Find {len(metadata)} pages\")\n    web_data = []\n    for item in metadata:\n        page_content = self.web_content(item.get(\"url\"))\n        web_data.append(DocumentPage(page_content, metadata=item))\n    return web_data\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu.baidu_search","title":"baidu_search","text":"<pre><code>baidu_search(\n    query: Annotated[str, \"The query to search for\", True],\n    pages: Annotated[\n        Optional[int],\n        \"Number of pages to search, and you can\",\n        False,\n    ] = 5,\n) -&gt; str\n</code></pre> <p>Search for a query on Baidu and return the results as a string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Annotated[str, 'The query to search for', True]</code> <p>The query to search for</p> required <code>pages</code> <code>Annotated[Optional[int], 'Number of pages to search, and you can', False]</code> <p>Number of pages to search, You can search multiple pages at the same time to ensure the information is accurate. The default is 10 pages.</p> <code>5</code> <p>Returns:</p> Type Description <code>str</code> <p>A string containing the search results</p> Source code in <code>lumix\\agent\\tools\\search\\baidu.py</code> <pre><code>def baidu_search(\n        query: Annotated[str, \"The query to search for\", True],\n        pages: Annotated[Optional[int], \"Number of pages to search, and you can\", False] = 5,\n) -&gt; str:\n    \"\"\" Search for a query on Baidu and return the results as a string.\n\n    Args:\n        query: The query to search for\n        pages:\n            Number of pages to search, You can search multiple pages at the\n            same time to ensure the information is accurate. The default is 10 pages.\n\n    Returns:\n        A string containing the search results\n    \"\"\"\n    baidu = BaiduSearch(verbose=True)\n    page_data = baidu.search(query=query, pages=pages)\n    for page in page_data:\n        page.page_content = drop_multi_mark(text=page.page_content)\n    content = str([page.model_dump() for page in page_data])\n    return content\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu_image.BaiduImageSearch","title":"BaiduImageSearch","text":"<pre><code>BaiduImageSearch(\n    api_key: Optional[str] = None,\n    key_name: Optional[str] = \"BAIDU_SEARCH\",\n    quality: Literal[\"high\", \"low\"] = \"low\",\n    logger: Optional[Callable] = None,\n    verbose: Optional[bool] = False,\n)\n</code></pre> <p>\u200b\u767e\u5ea6\u200b\u56fe\u7247\u200b\u641c\u7d22\u200b\u5de5\u5177\u200b</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>Optional[str]</code> <p>\u200b\u767e\u5ea6\u200b\u56fe\u7247\u200b\u641c\u7d22\u200b\u7684\u200bAPI Key</p> <code>None</code> <code>key_name</code> <code>Optional[str]</code> <p>API Key\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u952e\u540d\u200b</p> <code>'BAIDU_SEARCH'</code> <code>quality</code> <code>Literal['high', 'low']</code> <p>\u200b\u56fe\u7247\u200b\u8d28\u91cf\u200b\uff0c\u200b\u53ef\u200b\u9009\u200b\"high\"\u200b\u6216\u200b\"low\"\uff0c\u200b\u9ed8\u8ba4\u200b\"low\"</p> <code>'low'</code> <code>logger</code> <code>Optional[Callable]</code> <p>\u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b</p> <code>None</code> <code>verbose</code> <code>Optional[bool]</code> <p>\u200b\u662f\u5426\u200b\u6253\u5370\u200b\u8be6\u7ec6\u4fe1\u606f\u200b</p> <code>False</code> <p>Examples:</p> <pre><code>import matplotlib.pyplot as plt\nfrom lumix.agent.tools import BaiduImageSearch\n\nbaidu = BaiduImageSearch(verbose=True)\nimages = baidu.search(query=\"cat\")\n\nfor i, image in enumerate(images):\n    plt.imshow(image.image)\n    plt.axis('off')\n    plt.show()\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu_image.py</code> <pre><code>def __init__(\n        self,\n        api_key: Optional[str] = None,\n        key_name: Optional[str] = \"BAIDU_SEARCH\",\n        quality: Literal[\"high\", \"low\"] = \"low\",\n        logger: Optional[Callable] = None,\n        verbose: Optional[bool] = False,\n):\n    \"\"\"\u200b\u767e\u5ea6\u200b\u56fe\u7247\u200b\u641c\u7d22\u200b\u5de5\u5177\u200b\n\n    Args:\n        api_key: \u200b\u767e\u5ea6\u200b\u56fe\u7247\u200b\u641c\u7d22\u200b\u7684\u200bAPI Key\n        key_name: API Key\u200b\u7684\u200b\u914d\u7f6e\u6587\u4ef6\u200b\u952e\u540d\u200b\n        quality: \u200b\u56fe\u7247\u200b\u8d28\u91cf\u200b\uff0c\u200b\u53ef\u200b\u9009\u200b\"high\"\u200b\u6216\u200b\"low\"\uff0c\u200b\u9ed8\u8ba4\u200b\"low\"\n        logger: \u200b\u65e5\u5fd7\u200b\u8bb0\u5f55\u5668\u200b\n        verbose: \u200b\u662f\u5426\u200b\u6253\u5370\u200b\u8be6\u7ec6\u4fe1\u606f\u200b\n\n    Examples:\n        ```python\n        import matplotlib.pyplot as plt\n        from lumix.agent.tools import BaiduImageSearch\n\n        baidu = BaiduImageSearch(verbose=True)\n        images = baidu.search(query=\"cat\")\n\n        for i, image in enumerate(images):\n            plt.imshow(image.image)\n            plt.axis('off')\n            plt.show()\n        ```\n    \"\"\"\n    self.quality = quality\n    self.logger = logger\n    self.verbose = verbose\n    self.set_api_key(api_key, key_name)\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu_image.BaiduImageSearch.set_api_key","title":"set_api_key","text":"<pre><code>set_api_key(\n    api_key: Optional[str] = None,\n    key_name: Optional[str] = None,\n)\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu_image.py</code> <pre><code>def set_api_key(self, api_key: Optional[str] = None, key_name: Optional[str] = None):\n    \"\"\"\"\"\"\n    if api_key is not None:\n        self.headers[\"Cookie\"] = api_key\n    elif key_name is not None and os.getenv(key_name):\n        self.headers[\"Cookie\"] = os.getenv(key_name)\n    else:\n        raise ValueError(\"Please set api_key or key_name\")\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu_image.BaiduImageSearch.make_params","title":"make_params","text":"<pre><code>make_params(query: str, page: int = 0) -&gt; dict\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>str</code> required <code>page</code> <code>int</code> <code>0</code> <p>Returns:</p> Source code in <code>lumix\\agent\\tools\\search\\baidu_image.py</code> <pre><code>def make_params(self, query: str, page: int = 0) -&gt; dict:\n    \"\"\"\n    Args:\n        query:\n        page:\n\n    Returns:\n\n    \"\"\"\n    return {\n        \"tn\": \"resultjson_com\",\n        \"ipn\": \"rj\",\n        \"ct\": \"201326592\",\n        \"fp\": \"result\",\n        \"word\": query,\n        \"queryWord\": query,\n        \"ie\": \"utf-8\",\n        \"oe\": \"utf-8\",\n        \"pn\": str(int(page * 10)),\n        \"rn\": \"30\",\n        \"gsm\": \"3c\",\n    }\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu_image.BaiduImageSearch.fetch_images","title":"fetch_images","text":"<pre><code>fetch_images(metadata: List[Dict]) -&gt; List[SearchedImage]\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu_image.py</code> <pre><code>def fetch_images(self, metadata: List[Dict]) -&gt; List[SearchedImage]:\n    \"\"\"\"\"\"\n    images = []\n    metadata = [item for item in metadata if item]\n    for _metadata in metadata:\n        if self.quality == \"low\":\n            image_url = _metadata.get(\"image_url\")\n        elif self.quality == \"high\":\n            image_url = _metadata.get(\"object_url\")\n        else:\n            raise ValueError(\"Please set quality to 'low' or 'high'\")\n\n        try:\n            response = requests.get(image_url, headers=self.headers)\n            image = Image.open(io.BytesIO(response.content))\n            images.append(SearchedImage(image=image, metadata=_metadata))\n        except Exception as e:\n            self.warning(msg=f\"[{__class__.__name__}] Error fetching image from {image_url}: {str(e)}\")\n\n    self.info(msg=f\"[{__class__.__name__}] Fetched {len(images)} / {len(metadata)} images\")\n    return images\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu_image.BaiduImageSearch.fetch_metadata","title":"fetch_metadata","text":"<pre><code>fetch_metadata(data: Optional[Dict] = None) -&gt; Dict\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu_image.py</code> <pre><code>def fetch_metadata(self, data: Optional[Dict] = None) -&gt; Dict:\n    \"\"\"\"\"\"\n    mark = any([\n        data is None,\n        data.get(\"thumbURL\") is None,\n        data.get(\"replaceUrl\") is None,\n        data.get(\"fromPageTitle\") is None,\n    ])\n    if mark:\n        return dict()\n    else:\n        origin_url = data.get(\"replaceUrl\")[0]\n        return {\n            \"image_url\": data.get(\"thumbURL\"),\n            \"object_url\": origin_url.get(\"ObjURL\"),\n            \"from_url\": origin_url.get(\"FromURL\"),\n            \"from_title\": data.get(\"fromPageTitle\")\n        }\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu_image.BaiduImageSearch.search","title":"search","text":"<pre><code>search(query: str) -&gt; List[SearchedImage]\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu_image.py</code> <pre><code>def search(self, query: str) -&gt; List[SearchedImage]:\n    \"\"\"\"\"\"\n    params = self.make_params(query)\n    url = assemble_url(self.base_url, params)\n    response = requests.get(url, headers=self.headers)\n    metadata = list(map(self.fetch_metadata, response.json().get(\"data\")))\n    return self.fetch_images(metadata)\n</code></pre>"},{"location":"api/search/#lumix.agent.tools.search.baidu_image.baidu_image_search","title":"baidu_image_search","text":"<pre><code>baidu_image_search(\n    query: Annotated[str, \"The query to search for\", True]\n) -&gt; List[Image]\n</code></pre> <p>Search for a query on Baidu and return the results as a string.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Annotated[str, 'The query to search for', True]</code> <p>The query to search for</p> required <p>Returns:</p> Type Description <code>List[Image]</code> <p>A string containing the search results</p> <p>Examples:</p> <pre><code>images = baidu_image_search(\"cat\")\n</code></pre> Source code in <code>lumix\\agent\\tools\\search\\baidu_image.py</code> <pre><code>def baidu_image_search(\n        query: Annotated[str, \"The query to search for\", True],\n) -&gt; List[Image.Image]:\n    \"\"\" Search for a query on Baidu and return the results as a string.\n\n    Args:\n        query: The query to search for\n\n    Returns:\n        A string containing the search results\n\n    Examples:\n        ```python\n        images = baidu_image_search(\"cat\")\n        ```\n    \"\"\"\n    baidu = BaiduImageSearch(verbose=True)\n    images = baidu.search(query=query)\n    images = [image.image for image in images]\n    return images\n</code></pre>"},{"location":"blog/","title":"Blog","text":""}]}